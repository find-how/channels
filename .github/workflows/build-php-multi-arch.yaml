name: Build and Release Multi-Arch PHP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Prepare PHP Versions Matrix
        id: set-matrix
        run: |
          echo "matrix=$(jq -n \
            --argjson versions '["7.2.34", "7.3.33", "7.4.33", "8.0.30", "8.1.27", "8.2.17"]' \
            '{ "php-version": $versions }')" >> $GITHUB_OUTPUT

  build-and-release:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 1: Set up QEMU for Multi-Arch Builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # Step 4: Install Rattler and Pixi
      - name: Install Rattler and Pixi
        run: |
          curl -fsSL https://rattler.dev/install.sh | bash
          export PATH=$HOME/.rattler/bin:$PATH
          rattler init
          pixi init

      # Step 5: Configure Environment with Pixi
      - name: Configure Environment with Pixi
        run: |
          pixi add gcc make autoconf bison re2c libxml2 oniguruma openssl@1.1
          pixi lock --platform linux-64
          pixi export -o pixi-environment.yaml

      # Step 6: Build PHP Docker Image
      - name: Build PHP Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg PHP_VERSION=${{ matrix.php-version }} \
            --build-arg Rattler_ENV=pixi-environment.yaml \
            -t ${{ env.DOCKERHUB_USERNAME }}/php:${{ matrix.php-version }}-mac-arm64 \
            --push .

      # Step 7: Create GitHub Release (Only on main branch)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: php-${{ matrix.php-version }}-mac-arm64
          release_name: PHP ${{ matrix.php-version }} for Mac Apple Silicon
          body: |
            Built PHP version ${{ matrix.php-version }} for Mac Apple Silicon (ARM64).
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Upload Docker Image as Release Asset
      - name: Download Docker Image Tarball
        run: |
          docker pull ${{ env.DOCKERHUB_USERNAME }}/php:${{ matrix.php-version }}-mac-arm64
          docker save ${{ env.DOCKERHUB_USERNAME }}/php:${{ matrix.php-version }}-mac-arm64 -o php-${{ matrix.php-version }}-mac-arm64.tar

      - name: Upload Docker Image to Release
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: php-${{ matrix.php-version }}-mac-arm64.tar
          asset_name: php-${{ matrix.php-version }}-mac-arm64.tar
          asset_content_type: application/octet-stream
